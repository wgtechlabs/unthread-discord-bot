# =============================================================================
# UNTHREAD DISCORD BOT - RAILWAY ENVIRONMENT CONFIGURATION
# =============================================================================
# This file is optimized for Railway deployment with auto-configured services
# Based on the proven Telegram bot Railway configuration
# =============================================================================

NODE_ENV="production" # Environment mode (keep as production for Railway)

# ======= Discord Bot Configuration (Required) =======
DISCORD_BOT_TOKEN="" # Get from Discord Developer Portal → Bot → Token - REQUIRED
CLIENT_ID="" # Discord Application ID from Developer Portal - REQUIRED
GUILD_ID="" # Discord Server ID (enable developer mode and copy) - REQUIRED

# ======= Unthread Integration (Required) =======
UNTHREAD_API_KEY="" # Get from Unthread dashboard API settings - REQUIRED
UNTHREAD_SLACK_CHANNEL_ID="" # Target Slack channel ID from Unthread - REQUIRED
UNTHREAD_WEBHOOK_SECRET="" # Webhook secret from Unthread dashboard - REQUIRED

# ======= Railway Auto-Configured Infrastructure =======
# PostgreSQL Database (auto-configured by Railway)
POSTGRES_URL="${{"Postgres (Platform)".DATABASE_URL}}" # Auto-configured PostgreSQL connection URL
POSTGRES_PASSWORD="${{Postgres (Platform).POSTGRES_PASSWORD}}"
POSTGRES_USER="${{Postgres (Platform).POSTGRES_USER}}"

# Redis Services (auto-configured by Railway)
PLATFORM_REDIS_URL="${{"Redis (Platform)".REDIS_URL}}" # Auto-configured Redis for bot data storage
WEBHOOK_REDIS_URL="${{"Redis (Webhook)".REDIS_URL}}" # Redis URL for webhook processing - REQUIRED for agent responses

# ======= Discord Configuration (Required) =======
FORUM_CHANNEL_IDS="" # Forum channel IDs (comma-separated) for auto-ticket creation - REQUIRED

# ======= Optional Configuration =======
SLACK_TEAM_ID="" # Slack workspace ID (Team ID) for file downloads, format: T + 10 characters - OPTIONAL

# ======= Railway Optimized Settings =======
# Railway uses managed PostgreSQL with SSL - enable validation for Railway managed databases
DATABASE_SSL_VALIDATE="true" # Railway-specific: Enable SSL validation for managed databases (proven setting from Telegram bot)
WEBHOOK_POLL_INTERVAL="1000" # How often to check for agent replies (milliseconds)  
UNTHREAD_DEFAULT_PRIORITY="" # Default priority: 3 (low), 5 (medium), 7 (high), 9 (critical). Leave empty to use bot default.
DUMMY_EMAIL_DOMAIN="discord.invalid" # Default email domain for auto-generated emails

# =============================================================================
# RAILWAY DEPLOYMENT NOTES
# =============================================================================
# 1. Add PostgreSQL service: Add → Database → PostgreSQL (name it "Postgres (Platform)")
# 2. Add Redis services: 
#    - Add → Database → Redis (name it "Redis (Platform)")
#    - Add → Database → Redis (name it "Redis (Webhook)")
# 3. Configure environment variables in Railway dashboard using this file
# 4. Deploy directly from GitHub repository
# 5. Railway will auto-configure database and Redis connections using template variables
# 6. Railway's PostgreSQL uses SSL with self-signed certificates (handled automatically)
# 7. Your bot detects Railway environment and applies appropriate SSL settings
#
# CRITICAL RAILWAY REQUIREMENTS:
# - Service names MUST match exactly: "Postgres (Platform)", "Redis (Platform)", "Redis (Webhook)"
# - Template variables will be auto-populated by Railway on deployment
# - Connection timeouts optimized for Railway's managed database startup times
# - Railway detection via railway.internal hostnames ensures proper SSL handling
#
# DISCORD BOT DEFAULTS:
# - All timeouts and performance settings have sensible defaults
# - Railway environment detection handles SSL configuration automatically
# - Only override environment variables if you need custom values
# =============================================================================
