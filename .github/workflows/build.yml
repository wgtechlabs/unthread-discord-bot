---
name: Build

on:
  push:
    branches: [dev]
  pull_request:
    branches: [dev, main]

env:
  REGISTRY_DOCKERHUB: wgtechlabs/unthread-discord-bot
  REGISTRY_GHCR: ghcr.io/wgtechlabs/unthread-discord-bot

jobs:
  build-dev:
    name: Build Development Images
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        run: |
          echo "short_sha=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          echo "build_date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      - name: Build and push development images
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.REGISTRY_DOCKERHUB }}:dev
            ${{ env.REGISTRY_DOCKERHUB }}:dev-${{ steps.meta.outputs.short_sha }}
            ${{ env.REGISTRY_GHCR }}:dev
            ${{ env.REGISTRY_GHCR }}:dev-${{ steps.meta.outputs.short_sha }}
          labels: |
            org.opencontainers.image.title=Unthread Discord Bot
            org.opencontainers.image.description=Discord bot integration for unthread.io ticketing system.
            org.opencontainers.image.version=dev-${{ steps.meta.outputs.short_sha }}
            org.opencontainers.image.created=${{ steps.meta.outputs.build_date }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.url=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.licenses=AGPL-3.0
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Generate SBOM and attestations for supply chain security
          sbom: true
          provenance: mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        continue-on-error: true
        with:
          image-ref: >-
            ${{ env.REGISTRY_DOCKERHUB }}:dev-${{ steps.meta.outputs.short_sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-results.sarif') != ''
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Development build summary
        run: |
          echo "## ðŸ”¨ Development Build Complete" >> $GITHUB_STEP_SUMMARY
          echo "**Images built and pushed:**" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY_DOCKERHUB }}:dev\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY_DOCKERHUB }}:dev-${{ steps.meta.outputs.short_sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY_GHCR }}:dev\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY_GHCR }}:dev-${{ steps.meta.outputs.short_sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Test the dev image:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY_DOCKERHUB }}:dev" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
