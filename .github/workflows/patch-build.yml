---
name: Patch Build

on:
  pull_request:
    branches: [main]
    paths:
      - 'src/**'
      - 'Dockerfile'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - '.npmrc'
      - '.github/workflows/**'
      - 'docker-compose.yml'

env:
  REGISTRY_DOCKERHUB: wgtechlabs/unthread-discord-bot
  REGISTRY_GHCR: ghcr.io/wgtechlabs/unthread-discord-bot

jobs:
  build-patch:
    name: Build Patch Images
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    permissions:
      contents: read
      packages: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        run: |
          echo "short_sha=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          echo "build_date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
          echo "pr_number=${{ github.event.number }}" >> $GITHUB_OUTPUT

      - name: Build and push patch images
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.REGISTRY_DOCKERHUB }}:patch-${{ steps.meta.outputs.short_sha }}
            ${{ env.REGISTRY_GHCR }}:patch-${{ steps.meta.outputs.short_sha }}
          labels: |
            org.opencontainers.image.title=Unthread Discord Bot (Patch)
            org.opencontainers.image.description=Turn Discord servers into comprehensive support ticket hubs with real-time bidirectional communication â€” powered by Unthread.io. (Patch Build)
            org.opencontainers.image.version=patch-${{ steps.meta.outputs.short_sha }}
            org.opencontainers.image.created=${{ steps.meta.outputs.build_date }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.url=${{ github.server_url }}/${{ github.repository }}/pull/${{ steps.meta.outputs.pr_number }}
            org.opencontainers.image.licenses=AGPL-3.0
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## ðŸ©¹ Patch Image Built Successfully
            
            **Test this patch with Docker:**
            \`\`\`bash
            # Docker Hub
            docker pull ${{ env.REGISTRY_DOCKERHUB }}:patch-${{ steps.meta.outputs.short_sha }}
            
            # GitHub Container Registry
            docker pull ${{ env.REGISTRY_GHCR }}:patch-${{ steps.meta.outputs.short_sha }}
            \`\`\`
            
            **Deploy to Railway/Cloud for testing:**
            - Image: \`${{ env.REGISTRY_DOCKERHUB }}:patch-${{ steps.meta.outputs.short_sha }}\`
            - SHA: \`${{ github.sha }}\`
            - Built: \`${{ steps.meta.outputs.build_date }}\`
            
            > âš¡ Hotfix ready for validation in production-like environment!`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Patch build summary
        run: |
          echo "## ðŸ©¹ Patch Build Complete" >> $GITHUB_STEP_SUMMARY
          echo "**PR Number:** #${{ steps.meta.outputs.pr_number }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch Flow:** \`${{ github.head_ref }}\` â†’ \`main\`" >> $GITHUB_STEP_SUMMARY
          echo "**Build Type:** Hotfix (Direct to main)" >> $GITHUB_STEP_SUMMARY
          echo "**Images built and pushed:**" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY_DOCKERHUB }}:patch-${{ steps.meta.outputs.short_sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY_GHCR }}:patch-${{ steps.meta.outputs.short_sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Test the patch image:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY_DOCKERHUB }}:patch-${{ steps.meta.outputs.short_sha }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "**âš¡ Patch Build Notice:** Hotfix ready for validation in production-like environment!" >> $GITHUB_STEP_SUMMARY