# =============================================================================
# UNTHREAD DISCORD BOT - DOCKER COMPOSE CONFIGURATION
# =============================================================================
# Complete application stack for the Unthread Discord Bot integration
#
# Services:
# ┌─ discord-bot     → Main Discord bot application with webhook server
# └─ redis-platform  → Redis for bot operations & caching
#
# Usage:
#   docker-compose up -d                    # Start all services
#   docker-compose logs -f discord-bot      # View bot logs
#   docker-compose exec redis-platform redis-cli
#
# Prerequisites: 
#   - Copy .env.example to .env and configure your tokens
#   - Ensure external network exists: docker network create unthread-integration-network
# =============================================================================

services:
  # =============================================================================
  # DISCORD BOT APPLICATION
  # =============================================================================
  # Main Node.js application that handles Discord bot interactions and webhooks
  discord-bot:
    build: .  # Build from local Dockerfile instead of pulling from Docker Hub
    environment:
      NODE_ENV: production
    env_file:
      - .env  # Contains bot tokens, API keys, and Redis URL
    ports:
      - "3000:3000"  # Expose webhook endpoint for Unthread integration
    depends_on:
      redis-platform:
        condition: service_healthy  # Wait for Redis to be ready
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - unthread-integration-network

  # =============================================================================
  # REDIS - PLATFORM OPERATIONS
  # =============================================================================
  # Redis instance for bot caching, session management, and general operations
  redis-platform:
    image: redis:7-alpine  # Latest stable Redis
    restart: always
    ports:
      - "6379:6379"  # Standard Redis port
    volumes:
      - redis_platform_data:/data  # Persistent Redis data
    command: redis-server --appendonly yes  # Enable data persistence
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - unthread-integration-network

# =============================================================================
# PERSISTENT VOLUMES
# =============================================================================
# Named volumes for data persistence across container restarts
volumes:
  redis_platform_data:  # Redis platform cache data  

# =============================================================================
# NETWORKING
# =============================================================================
# External network for communication between services and future integrations
# Create with: docker network create unthread-integration-network

# ⚠️ IMPORTANT: If you don't create this network first, Docker will fail with:
# "ERROR: Network unthread-integration-network declared as external, but could not be found"
networks:
  unthread-integration-network:
    external: true