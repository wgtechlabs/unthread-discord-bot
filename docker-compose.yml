# =============================================================================
# UNTHREAD DISCORD BOT - DOCKER COMPOSE CONFIGURATION
# =============================================================================
# Complete application stack for the Unthread Discord Bot integration
#
# Services:
# ┌─ server                      → Main Discord bot application  
# ├─ unthread-webhook-server    → Handles incoming Unthread webhooks
# ├─ postgres-platform          → PostgreSQL database for bot data
# ├─ redis-platform             → Redis for bot operations & caching
# └─ redis-webhook              → Redis for webhook message queuing
#
# Docker Container Naming:
#   - server                    → unthread-discord-bot-server-1
#   - unthread-webhook-server   → unthread-discord-bot-unthread-webhook-server-1
#   - postgres-platform        → unthread-discord-bot-postgres-platform-1
#   - redis-platform            → unthread-discord-bot-redis-platform-1
#   - redis-webhook             → unthread-discord-bot-redis-webhook-1
#
# This naming follows wgtechlabs/unthread-telegram-bot convention for consistency.
#
# Usage:
#   docker-compose up -d                    # Start all services (network created automatically)
#   docker-compose logs -f server           # View bot logs
#   docker-compose exec postgres-platform psql -U postgres -d unthread_discord_bot
#
# Prerequisites: 
#   - Copy .env.example to .env and configure your tokens
#   - That's it! Network and volumes are created automatically
# =============================================================================

services:
  # =============================================================================
  # DISCORD BOT APPLICATION
  # =============================================================================
  # Main Node.js application that handles Discord bot interactions
  #
  # SERVICE NAMING CONVENTION:
  # We use "server" to match the unthread-telegram-bot naming convention for consistency.
  # This creates Docker containers named: unthread-discord-bot-server-1
  # (vs unthread-discord-bot-unthread-discord-bot-1 if we used the full name)
  #
  # Docker Process Examples:
  #   docker ps              → unthread-discord-bot-server-1
  #   docker logs server     → View bot logs
  #   docker exec server     → Access bot container
  #
  # This follows the same pattern as wgtechlabs/unthread-telegram-bot for easier
  # cross-repository management and standardized tooling.
  server:
    build: .  # Build from local Dockerfile instead of pulling from Docker Hub
    env_file:
      - .env  # Contains bot tokens, API keys, and database URLs (including NODE_ENV)
    depends_on:
      postgres-platform:
        condition: service_healthy  # Wait for database to be ready
      redis-platform:
        condition: service_healthy  # Wait for Redis to be ready
      redis-webhook:
        condition: service_healthy  # Wait for webhook Redis to be ready
    networks:
      - unthread-integration-network

  # =============================================================================
  # WEBHOOK SERVER  
  # =============================================================================
  # Handles incoming webhooks from Unthread and queues them for processing
  webhook-server:
    image: wgtechlabs/unthread-webhook-server:latest
    ports:
      - "3000:3000"  # Expose webhook endpoint
    env_file:
      - .env
    environment:
      # Override Redis URL to use webhook-specific Redis instance
      - REDIS_URL=redis://redis-webhook:6379
      # Set target platform for webhook routing
      - TARGET_PLATFORM=discord
    depends_on:
      redis-webhook:
        condition: service_healthy  # Wait for Redis to be ready
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - unthread-integration-network

  # =============================================================================
  # DATABASE
  # =============================================================================
  # PostgreSQL database for storing tickets, customers, and user states
  postgres-platform:
    image: postgres:15-alpine  # Alpine for smaller image size
    restart: always
    environment:
      POSTGRES_DB: unthread_discord_bot    # Fixed database name for local dev
      POSTGRES_USER: postgres              # Fixed username for local dev
      POSTGRES_PASSWORD: postgres          # Fixed password for local dev
    ports:
      - "5432:5432"  # Expose for external connections (optional)
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Persistent data storage
      - ./src/database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - unthread-integration-network

  # =============================================================================
  # REDIS - PLATFORM OPERATIONS
  # =============================================================================
  # Redis instance for bot caching, session management, and general operations
  redis-platform:
    image: redis:8-alpine  # Updated to Redis v8 for Railway compatibility
    restart: always
    ports:
      - "6379:6379"  # Standard Redis port
    volumes:
      - redis_platform_data:/data  # Persistent Redis data
    command: redis-server --appendonly yes  # Enable data persistence
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - unthread-integration-network

  # =============================================================================
  # REDIS - WEBHOOK OPERATIONS
  # =============================================================================
  # Dedicated Redis instance for webhook message queuing and communication
  redis-webhook:
    image: redis:8-alpine  # Updated to Redis v8 for Railway compatibility
    ports:
      - "6380:6379"  # Different external port to avoid conflicts with platform Redis
    volumes:
      - redis_webhook_data:/data  # Separate data storage
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 30s
    networks:
      - unthread-integration-network

# =============================================================================
# PERSISTENT VOLUMES
# =============================================================================
# Named volumes for data persistence across container restarts
volumes:
  postgres_data:      # PostgreSQL database files
  redis_platform_data:  # Redis platform cache data  
  redis_webhook_data:    # Redis webhook queue data

# =============================================================================
# NETWORKING
# =============================================================================
# Docker Compose will automatically create and manage this network
# Network name will be: unthread-discord-bot_unthread-integration-network
networks:
  unthread-integration-network:
    driver: bridge
    name: unthread-integration-network  # Use explicit name for consistency